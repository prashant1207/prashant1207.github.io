{"version":3,"sources":["app/logo.svg","features/interactor/app.interactor.js","features/home/component/profile/profile.component.js","features/home/component/sections/sections.component.js","features/home/home.component.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomeInteractor","getProfile","_callee","profile","response","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","t0","console","error","abrupt","stop","renderTags","data","color","map","item","idx","react_default","createElement","tag","key","title","renderTagButton","es_button","onClick","e","window","open","url","type","renderIconButton","links","className","icon","renderCustomCard","Text","Typography","Profile","this","props","name","picture","position","employer","summary","languages","src","alt","width","height","style","display","flexDirection","interactor","React","Component","Sections","renderSections","sections_component_Text","description","list","header","list_header","dataSource","renderItem","text","Item","renderProjects","date","whiteSpace","sections","projects","resource","length","flexWrap","Home","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setup","asyncToGenerator","mark","setState","renderProfilePage","row","col","xs","sm","md","lg","xl","profile_component","gutter","sections_component","state","_this$state","fontSize","App","home_home_component","Boolean","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84162690.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Button, Tag } from 'antd';\nconst PROFILE_URL = 'https://dl.dropboxusercontent.com/s/os3637ycu86wgcw/profile.json';\nclass HomeInteractor {\n    static getProfile = async () => {\n        let profile = null;\n        try {\n            let response = await fetch(PROFILE_URL);\n            profile = response.json();\n        } catch (error) {\n            console.error('Unable to get profile');\n        }\n\n        return profile;\n    }\n\n\n    static renderTags = (data, color) => {\n        const elements = data.map((item, idx) => {\n            return <Tag key={idx} color={color}>{item.title}</Tag>\n        })\n\n        return elements;\n    }\n\n    static renderTagButton = (data) => {\n        const elements = data.map((item, idx) => {\n            return <Button key={idx} onClick={e => window.open(item.url, '_blank')} type=\"link\"><Tag color='#108ee9'>{item.title}</Tag></Button>\n        })\n\n        return elements;\n    }\n\n    static renderIconButton = (links) => {\n        const elements = links.map((item, idx) => {\n            return <Button key={idx} className='profile-button' onClick={e => window.open(item.url, '_blank')} type=\"link\" icon={item.icon}></Button>\n        })\n\n        return elements;\n    }\n\n    static renderCustomCard = (links) => {\n\n    }\n}\n\nexport default HomeInteractor;","import React from 'react';\nimport { Typography } from 'antd';\nimport interactor from '../../../interactor/app.interactor';\nconst { Text } = Typography;\nclass Profile extends React.Component {\n    render() {\n        const { profile }  = this.props;\n        const { name, picture, position, employer, summary, languages } = profile;\n        return (\n            <div>\n                <img className='profile-picture' src={picture} alt=\"Profile Picture\" width=\"100\" height=\"100\" />\n                <p className='profile-title accent'>{name}</p>\n                <p className='project-title sub-accent'>{summary}</p>\n                <br />\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\n                    <Text className='profile-employer' type=\"secondary\">{position}</Text>\n                    <Text className='profile-employer' type=\"secondary\">{employer}</Text>                    \n                </div>\n                <br />\n                {interactor.renderTags(languages, 'blue')}\n            </div>\n        );\n    }\n}\n\nexport default Profile;\n","import React from 'react';\nimport { Button, Typography, List } from 'antd';\nimport interactor from '../../../interactor/app.interactor';\nconst { Text } = Typography;\nclass Sections extends React.Component {\n    renderSections = (data) => {\n        const elements = data.map((item, idx) => {\n            return (\n                <div className='section-div' key={idx}>\n                    <p className='section-title accent'>{item.name}</p>\n                    <Text>{item.description}</Text>\n                    {\n                        item.list ?\n                            (\n                                <List\n                                    header={item.list_header}\n                                    dataSource={item.list}\n                                    renderItem={text => (\n                                        <List.Item>\t• {text}</List.Item>\n                                    )}\n                                />\n                            )\n                            :\n                            null\n                    }\n\n                </div>\n            )\n        });\n\n        return elements;\n    }\n\n    renderProjects = (data) => {\n        const elements = data.map((item, idx) => {\n            return (\n                <div key={idx} className='card'>\n                    <p className='project-title sub-accent'>{item.title}</p>\n                    <Text type='secondary'>{item.date}</Text>\n                    <br />\n                    <Text>{item.description}</Text>\n                    <br />\n                    <Button key={idx} style={{ whiteSpace: 'pre-wrap'}} onClick={e => window.open(item.url, '_blank')} type=\"link\">{item.url}</Button>\n                    <br />\n                </div>\n            );\n        })\n\n        return elements;\n    }\n\n    render() {\n        const { profile } = this.props;\n        const { sections, projects, resource } = profile;\n        return (\n            <div>\n                <p className='section-title accent'>resources</p>\n                {interactor.renderTagButton(resource)}\n                <br />\n                <br />\n                {this.renderSections(sections)}\n                <br />\n                <div>\n                    {\n                        projects && projects.length > 0 ?\n                            <div>\n                                <p className='section-title accent'>Projects</p>\n                                <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n                                    {this.renderProjects(projects)}\n                                </div>\n                            </div>\n                            :\n                            null\n                    }\n                </div>\n                <br />\n            </div>\n        );\n    }\n}\n\nexport default Sections;\n","import React from 'react';\nimport { Row, Col, Icon } from 'antd';\nimport interactor from '../interactor/app.interactor';\nimport Profile from './component/profile/profile.component';\nimport Sections from './component/sections/sections.component';\nimport './home.component.css';\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.state = { profile: null, error: null };\n  }\n\n  componentDidMount() {\n    this.setup();\n  }\n\n\n  setup = async () => {\n    try {\n      const profile = await interactor.getProfile();\n      if (profile) {\n        this.setState({ profile: profile });\n      } else {\n        this.setState({ error: 'Profile data not found' });\n      }\n    } catch (error) {\n      this.setState({ error: 'Profile data not found' });\n    }\n  }\n\n  renderProfilePage = (profile) => {\n    return (\n      <div>\n        <Row>\n          <Col xs={24} sm={24} md={0} lg={0} xl={0}>\n            <Profile profile={profile} />\n            <br />\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={0} sm={0} md={6} lg={6} xl={6}>\n            <Profile profile={profile} />\n          </Col>\n          <Col xs={24} sm={24} md={18} lg={18} xl={18}>\n            <Sections profile={profile} />\n          </Col>\n        </Row>\n        <Row>\n          <div style={{ height: '10vh' }} />\n        </Row>\n      </div>\n    )\n  }\n\n  render() {\n    const { profile, error } = this.state;\n    return (\n      <div className='home-page'>\n        {\n          profile ? this.renderProfilePage(profile) : (error ? <h1>{error}</h1> : <Icon style={{ fontSize: '32px'}} type=\"loading\" />)\n        }\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Button, Alert } from 'antd';\nimport './App.css';\nimport Home from '../features/home/home.component';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}