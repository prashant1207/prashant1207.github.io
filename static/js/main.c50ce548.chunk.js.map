{"version":3,"sources":["app/logo.svg","features/home/home.interactor.js","features/home/home.component.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomeInteractor","getProfile","name","picture","summary","position","employer","about","projects","title","date","description","url","links","icon","Text","Typography","Title","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderLinks","map","item","idx","react_default","a","createElement","es_button","key","className","onClick","e","window","open","type","state","someKey","profile","interactor","col","xs","sm","md","lg","xl","row","src","alt","width","height","style","display","flexDirection","fontSize","strong","setState","React","Component","App","home_home_component","Boolean","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c50ce548.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","class HomeInteractor {\n    static getProfile = () => {\n        const profile = {\n            name: \"Prashant Tiwari\",\n            picture: \"https://media.licdn.com/dms/image/C4D03AQGYG0BOZViYRQ/profile-displayphoto-shrink_200_200/0?e=1569456000&v=beta&t=2q4UYSz-jfD_xmx3db-uSHCp--kwBxNwVI_Ew7aqH1A\", \n            summary: \"Software Developer with 7+ Years of Experience in Front End Development\",\n            position: \"Senior Software Engineer\",\n            employer: \"Telenor Norge\",\n            about: \"I am software developer with 7+ years of experience. I have woorked on different platforms such as iOS, Windows, ReactJS, ReactNative and AngularJS. I exensively worked on these front end technologies but also have experience with backend framework such as NodeJS and Asp.Net.\",\n            projects: [\n                {\n                    title: 'Github',\n                    date: 'Github',\n                    description: 'github',\n                    url: 'https://github.com/prashant1207'\n                },\n                {\n                    title: 'Github',\n                    date: 'Github',\n                    description: 'github',\n                    url: 'https://github.com/prashant1207'\n                },\n                {\n                    title: 'Github',\n                    date: 'Github',\n                    description: 'github',\n                    url: 'https://github.com/prashant1207'\n                }\n            ],\n            links: [\n                {\n                    title: 'Github',\n                    icon: 'github',\n                    url: 'https://github.com/prashant1207'\n                },\n                {\n                    title: 'Twitter',\n                    icon: 'twitter',\n                    url: 'https://twitter.com/prashant1207'\n                },\n                {\n                    title: 'LinkedIn',\n                    icon: 'linkedin',\n                    url: 'https://www.linkedin.com/in/prashant-tiwari-b4092216'\n                }\n            ]\n        }\n\n        return profile;\n    }\n}\n\nexport default HomeInteractor;","import React from 'react';\nimport { Row, Col, Button, Typography } from 'antd';\nimport interactor from './home.interactor';\nimport './home.component.css';\n\nconst { Title, Text } = Typography;\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.state = { someKey: 'someValue' };\n  }\n\n  renderLinks = (links) => {\n    const elements = links.map((item, idx) => {\n      return <Button key={idx} className='profile-button' onClick={e => window.open(item.url, '_blank')} type=\"link\" icon={item.icon}>{item.title}</Button>\n    })\n\n    return elements;\n  }\n\n  render() {\n    const profile = interactor.getProfile();\n    return (\n      <div className='home-page'>\n        <Col xs={0} sm={0} md={6} lg={6} xl={6}>\n          \n        </Col>\n        <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n          <Row>\n            <img className='profile-picture' src={profile.picture} alt=\"App Icon\" width=\"100\" height=\"100\" />\n            <p className='profile-title'>{profile.name}</p>\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n              <Text className='profile-subtitle' type=\"secondary\">{profile.position}</Text>\n              <Text className='profile-subtitle' type=\"secondary\">{profile.employer}</Text>\n            </div>\n          </Row>\n          <br />\n          <Row>\n            <Text style={{ fontSize: '16px'}} strong>{profile.summary}</Text>\n            <br />\n            <Text>{profile.about}</Text>\n          </Row>\n          <br />\n          <Row type='flex'>\n            {this.renderLinks(profile.links)}\n          </Row>\n        </Col>\n        <Col xs={0} sm={0} md={6} lg={6} xl={6}>\n\n        </Col>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.setState({ someKey: 'otherValue' });\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Button, Alert } from 'antd';\nimport './App.css';\nimport Home from '../features/home/home.component';\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}